---
title: "homework 5"
author: "sara gonzalez"
format: 
  html:
    toc: true
    toc-location: left
    code-fold: true
    theme: yeti
execute: 
  warning: false
  message: false
---

code fold is neat way to organize rendered html

```{r loading-packages}
library(tidyverse)
library(here)
library(janitor)
library(ggeffects)
library(performance)
library(naniar) # or equivalent
library(flextable) # or equivalent
library(car)
library(broom)
library(dplyr)
# would be nice to have
library(corrplot)
library(AICcmodavg)
library(GGally)
```

read in data

```{r read-in-data}
plant <- read_csv(here("data", "knb-lter-hfr", "hf109-01-sarracenia.csv")) %>% 
  # to make column names cleaner
  clean_names() %>%
  # selecting columns of interest
  select(totmass, species, feedlevel, sla, chlorophyll, amass, num_lvs, num_phylls)
```

visualize missing data

```{r missing-data-visualization}
gg_miss_var(plant)
```

subsetting data by dropping NA's

```{r subset-drop-NA}
plant_subset <- plant %>% 
  drop_na(chlorophyll, amass, sla, num_lvs, num_phylls)
```

create a correlation plot

(ex writing): To determine the relationships between numerical varibales in our dataset, we calculated Pearson's r and visually represented correlation using a correlation plot.

```{r correlation-plot}
# calculate Pearson's r for numerical values only
plant_cor <- plant_subset %>% 
  select(feedlevel:num_phylls) %>% 
  # diagonal is each variable compared to itself
  cor(method = "pearson")
  
# creating a correlation plot
corrplot(plant_cor,
         # change shape of what's in the cells
         method = "ellipse",
         addCoef.col = "black",
         mar=c(1,1,2,1))
title(main = "Correlation Plot",
         sub = "The variables have little, but some correlation with one another.")
```

create a plot of each variable compared against the others

```{r pairs-plot}
plant_pairs <- plant_subset %>% 
  select(species:num_phylls)
ggpairs(plant_pairs) +
  labs(title = "Relationships Between Variables", caption = "There us some sort of relationship that all the variables have with each other.")
```

starting regression here:

ex-writing: To determine how species and physiological characteristics predict biomass, we fit multiple linear models.

```{r null-and-full-model}
null <- lm(totmass ~ 1, data = plant_subset)
full <- lm(totmass ~ species + feedlevel + sla + chlorophyll + amass + num_lvs + num_phylls, data = plant_subset)
```

We visually assessed normality and homoscedasticity of residuals using diagnostic plots for the full model.

```{r full-diagnostics}
par(mfrow = c(2,2))
plot(full)
```

We also tested for normality using the Shapiro-Wilk test (null = variable of interest (residuals) are normally distributed) and homoscedasticity using the Breusch-Pagan test (null = residuals have constant variance).

```{r}
check_normality(full)
check_heteroscedasticity(full)
```

Assumptions of linear regression are not met.

```{r}
full_log <- lm(log(totmass) ~ species + feedlevel + sla + chlorophyll + amass + num_lvs + num_phylls, data = plant_subset) # hypotheses are about log(total) make sure to back transform from log to actual scale of biomass for results. all the estimates for slope = log scale, exponentiate whatever slope is
plot(full_log)
check_normality(full_log)
check_heteroscedasticity(full_log)
null_log <- lm(log(totmass) ~ 1, data = plant_subset)
```

All of the interpretation will be based on the transform response (natural log transform).

evaluate multicolinearity

```{r calculate-vif}
car::vif(full_log) # variable is inflating r^2 if >5; none of them inflate r^2 in this case
```

We evaluated multicolinearity by calculating the generalized variance inflation factor and determined that...

try some more models:

addressing the question: what set of predictor variables best explains the response?

```{r species-as-predictor}
model2_log <- lm(log(totmass) ~ species, data = plant_subset)
# check assumptions for model 2
plot(model2_log)
check_normality(model2_log)
check_heteroscedasticity(model2_log)
```

```{r num-phylls-as-predictor}
model3 <- lm(totmass ~ num_phylls, data = plant_subset)
# check assumptions for model 2
plot(model3)
check_normality(model3)
check_heteroscedasticity(model3)
```

```{r feedlevel-chlorophyll-species-as-predictors}
fcs_log <- lm(log(totmass) ~ feedlevel + species + chlorophyll, data = plant_subset)
plot(fcs_log)
check_normality(fcs_log)
check_heteroscedasticity(fcs_log)
```

compare models using Akaike's information criterion (AIC) values (looks for simplest model that explains the most variance.

```{r}
AICcmodavg::AICc(full_log)
AICcmodavg::AICc(model2_log)
AICcmodavg::AICc(null_log)

MuMIn::AICc(full_log, model2_log, null_log)
MuMIn::model.sel(full_log, model2_log, null_log)
MuMIn::AICc(full_log, model3, model2_log, fcs_log, null_log, chlorophyll_log, chlorophyll_model, feedlevel_log, feedlevel_model, amass_model)
```

We compared models using AIC and chose the model with the lowest value, which was the full model.

## Results

We found that the \_ model including \_ predictors best predicted \_\_\_ (model summary).

```{r}
summary(full_log)

table <- tidy(full_log, conf.int = TRUE) %>%
  mutate(p.value = case_when(p.value < 0.001 ~ "< 0.001")) %>% # change the p-value numbers if really small using mutate
  clean_names() %>%
  flextable() %>% # make into flextable
  set_header_labels(std_error = "Standard Error", conf_low = "Confidence (Low)",
conf_high = "Confidence (High)") %>% 
  autofit() # fit it to viewer
table
```

use ggpredict to back transform estimates

```{r}
# be transparent about transformations to satisfy model assumptions. Log transform, why, results reported on scale of original variable. 
model_pred <- ggpredict(full_log, term = "species", back.transform = TRUE) # ignore standard error part
model_pred # all else constant, you would expect for the mass of species to be...

plot(model_pred, add.data = TRUE)

plot(ggpredict(full_log, term = "chlorophyll", back.transform = TRUE), add.data = TRUE)

plot(ggpredict(full_log, term = "sla", back.transform = TRUE), add.data = TRUE) # ribbons indicate 95% confidence interval (around sla slope estimate)
```

## different types of anovas

```{r}
# type 1: order of variables matters
```

## three additional models

### species as predictor variable

```{r species-as-predictor-variable}
species_model <- lm(totmass ~ species, data = plant_subset)
par(mfrow = c(2,2))
plot(species_model)
check_normality(species_model)
check_heteroscedasticity(species_model) # check assumptions
species_log <- lm(log(totmass) ~ species, data = plant_subset)
plot(species_log)
check_normality(species_log)
check_heteroscedasticity(species_log)
```

### chlorophyll as predictor variable

```{r chlorophyll-as-predictor}
chlorophyll_model <- lm(totmass ~ chlorophyll, data = plant_subset)
par(mfrow = c(2,2))
plot(chlorophyll_model)
check_normality(chlorophyll_model)
check_heteroscedasticity(chlorophyll_model) # check assumptions
chlorophyll_log <- lm(log(totmass) ~ chlorophyll, data = plant_subset)
plot(chlorophyll_log)
check_normality(chlorophyll_log)
check_heteroscedasticity(chlorophyll_log)
```

### feed level as predictor variable

```{r feedlevel-as-predictor}
feedlevel_model <- lm(totmass ~ feedlevel, data = plant_subset)
par(mfrow = c(2,2))
plot(feedlevel_model)
check_normality(feedlevel_model)
check_heteroscedasticity(feedlevel_model) # check assumptions
feedlevel_log <- lm(log(totmass) ~ feedlevel, data = plant_subset)
plot(feedlevel_log)
check_normality(feedlevel_log)
check_heteroscedasticity(feedlevel_log)
```

### species, feed level, and chlorophyll as predictor variables

```{r}
fcs_model <- lm(totmass ~ feedlevel + species + chlorophyll, data = plant_subset)
par(mfrow = c(2,2))
plot(fcs_model)
check_normality(fcs_model)
check_heteroscedasticity(fcs_model) # check assumptions
fcs_log <- lm(log(totmass) ~ feedlevel + species + chlorophyll, data = plant_subset)
plot(fcs_log)
check_normality(fcs_log)
check_heteroscedasticity(fcs_log)
```

```{r}
amass_model <- lm(log(totmass) ~ amass + feedlevel, data = plant_subset)
par(mfrow = c(2,2))
plot(amass_model)
check_normality(amass_model)
check_heteroscedasticity(amass_model)
```

## VIF + model comparison

### VIF

```{r variance-inflation-factor}
vif(full_log)
```
